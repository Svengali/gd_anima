"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[516],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=u(a),c=r,k=s["".concat(p,".").concat(c)]||s[c]||d[c]||i;return a?n.createElement(k,l(l({ref:t},m),{},{components:a})):n.createElement(k,l({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},4818:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={sidebar_position:5},p="Dynamic values",u={unversionedId:"basics/dynamic-value",id:"basics/dynamic-value",title:"Dynamic values",description:"Dynamic values let us provide a formula as the initial or final value that depends on a node property or its surrounding.",source:"@site/tutorials/basics/dynamic-value.mdx",sourceDirName:"basics",slug:"/basics/dynamic-value",permalink:"/anima/tutorials/basics/dynamic-value",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Animate relative value",permalink:"/anima/tutorials/basics/relative"},next:{title:"Popup animation",permalink:"/anima/tutorials/node/simple-animation"}},m={},d=[{value:"Fixed value",id:"fixed-value",level:2},{value:"Limitations of fixed values",id:"limitations-of-fixed-values",level:3},{value:"Let&#39;s calculate it",id:"lets-calculate-it",level:4},{value:"Dynamic value",id:"dynamic-value",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3}],s={toc:d};function c(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dynamic-values"},"Dynamic values"),(0,i.kt)("p",null,"Dynamic values let us provide a formula as the initial or final value that depends on a node property or its surrounding."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Dynamic value is the key to creating truly reusable animations with Anima."))),(0,i.kt)("h2",{id:"fixed-value"},"Fixed value"),(0,i.kt)("p",null,"Before looking at dynamic values, let's have a look at the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gdscript"},'Anima.begin_single_shot(self).then(\n  Anima.Group($Grid)\n    .anima_property("x")\n    .anima_from(-100)\n).play()\n')),(0,i.kt)("p",null,"The animation translates the group children to their current position, as ",(0,i.kt)("a",{parentName:"p",href:"/docs/docs/tutorial-basics/fundamentals"},"we haven't defined any final value")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", from an initial position."),(0,i.kt)("p",null,"In the example the initial position is ",(0,i.kt)("inlineCode",{parentName:"p"},"[current_value] - 100"),", supposing that ",(0,i.kt)("strong",{parentName:"p"},"100")," is the width of the node(s)."),(0,i.kt)("h3",{id:"limitations-of-fixed-values"},"Limitations of fixed values"),(0,i.kt)("p",null,"We assumed that ",(0,i.kt)("strong",{parentName:"p"},"100")," is the node's width, but:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"there is no real correlation between the number and actual width"),(0,i.kt)("li",{parentName:"ol"},"inside the grid, we might have nodes with different widths")),(0,i.kt)("p",null,"Also, if we change any size of the nodes, we would then adjust the animation with the new value."),(0,i.kt)("h4",{id:"lets-calculate-it"},"Let's calculate it"),(0,i.kt)("p",null,"Sure, we could calculate the value manually, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gdscript"},'Anima.begin_single_shot(self).then(\n  Anima.Group($Grid)\n    .anima_property("x")\n    .anima_from($Grid.get_child(0).rect_size.x)\n).play()\n')),(0,i.kt)("p",null,"We fix the issue number ",(0,i.kt)("strong",{parentName:"p"},"1"),', but the 2nd still stands. Also, we made the code a bit less reusable as we tightened our "from" value to a specific node.'),(0,i.kt)("h2",{id:"dynamic-value"},"Dynamic value"),(0,i.kt)("p",null,"Anima solves all the limitations of the ",(0,i.kt)("strong",{parentName:"p"},"fixed values")," by letting you specify a ",(0,i.kt)("strong",{parentName:"p"},"dynamic formula")," that is computed when the animation is initialised."),(0,i.kt)("h3",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"The syntax of a single dynamic value is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gdscript"},"[relative node]:[property]:[sub key]\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"param"),(0,i.kt)("th",{parentName:"tr",align:null},"type"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"relative node"),(0,i.kt)("td",{parentName:"tr",align:null},"Node"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"The node from whom retrieve the ",(0,i.kt)("inlineCode",{parentName:"td"},"property")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"sub key"),". An empty value or ",(0,i.kt)("inlineCode",{parentName:"td"},".")," indicates the node animated itself")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"property"),(0,i.kt)("td",{parentName:"tr",align:null},"Variant"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"yes")),(0,i.kt)("td",{parentName:"tr",align:null},"The property value to compute")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sub key"),(0,i.kt)("td",{parentName:"tr",align:null},"Variant"),(0,i.kt)("td",{parentName:"tr",align:null},"no"),(0,i.kt)("td",{parentName:"tr",align:null},"The property subkey")))),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gdscript"},'Anima.begin_single_shot(self).then(\n  Anima.Group($Grid)\n    .anima_property("x")\n    .anima_from("-:size:x")\n).play()\n')),(0,i.kt)("p",null,"Let's analyse the parts of the dynamic value, and we have ",(0,i.kt)("inlineCode",{parentName:"p"},":size:x")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"value"),(0,i.kt)("th",{parentName:"tr",align:null},"description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"relative node"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The value is empty, meaning that we're going to read the property and subkey from the node we're animating")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"property"),(0,i.kt)("td",{parentName:"tr",align:null},"size"),(0,i.kt)("td",{parentName:"tr",align:null},"The node size (or rect_size)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sub key"),(0,i.kt)("td",{parentName:"tr",align:null},"x"),(0,i.kt)("td",{parentName:"tr",align:null},"The size.x value")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE"),": One thing we must keep in mind is that Anima creates an animation for every node in Group and Grid animations, so using ",(0,i.kt)("inlineCode",{parentName:"p"},".")," or `` for the ",(0,i.kt)("strong",{parentName:"p"},"relative node")," means getting the property from the current child Anima is going to animate."),(0,i.kt)("p",null,"Let's be more specific and consider a Grid node with the following children:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Node"),(0,i.kt)("th",{parentName:"tr",align:null},"size"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Button"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vector2(100, 100)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Label"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vector2(50, 30)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Sprite"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Vector2(150, 80)"))))),(0,i.kt)("p",null,"When Anima generates the animation will compute ",(0,i.kt)("inlineCode",{parentName:"p"},"-:size:x")," with:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Node"),(0,i.kt)("th",{parentName:"tr",align:null},"from"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Button"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-100"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Label"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-50"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Sprite"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-150"))))),(0,i.kt)("p",null,"As we can see, the initial value is replaced with the animated Node width. Also, the value is negative because we specified the ",(0,i.kt)("inlineCode",{parentName:"p"},"-")," in the formula."),(0,i.kt)("p",null,"We can find more example of dynamic values in the following area:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Animate a single node"),(0,i.kt)("li",{parentName:"ul"},"Animate a group node"),(0,i.kt)("li",{parentName:"ul"},"Animate a grid")))}c.isMDXComponent=!0}}]);
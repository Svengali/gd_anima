[gd_scene load_steps=4 format=2]

[ext_resource path="res://demos/components/ShowAllDemos.tscn" type="PackedScene" id=1]
[ext_resource path="res://demos/resources/ball.png" type="Texture2D" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

var _tile_size: Vector2

func _ready():
	var size = self.size
	_tile_size = $tile.texture.get_size()

	var max_y = ceil(size.y / _tile_size.y) + 1
	var max_x = ceil(size.x / _tile_size.x) + 1

	var start_x = size.x / 2 - (_tile_size.x * max_x) / 2
	var start_y = size.y / 2 - (_tile_size.y * max_y) / 2
	for y in range(0, max_y):
		for x in range(0, max_x):
			var new_tile = $tile.duplicate()

			new_tile.position.x = start_x + x * _tile_size.x
			new_tile.position.y = start_y + y * _tile_size.y

			$Grid.add_child(new_tile)

	$tile.free()

	AnimaAnimationsUtils.register_animation(\"gridAnimation\", gridAnimation())

	Anima.begin_single_shot($Grid) \\
		super.then(
			Anima.Group($Grid, 0.05) \\
				super.anima_animation(\"gridAnimation\", 1) \\
		) \\
		super.play_with_delay(0.5)

func gridAnimation() -> Dictionary:
	var size = self.size
	var center_x = (size.x / 2) - (_tile_size.x / 2)

	return {
		from = {
			opacity = 1,
			scale = Vector2(1, 1)
		},
		to = {
			x = \"(../..:size:x / 2) - (:size:x / 2)\",
			y = - 100,
#			position = Vector2(center_x, - 100),
			scale = Vector2(0, 0),
			opacity = 0,
		}
	}

"

[node name="AnimateGroup" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )

[node name="tile" type="Sprite2D" parent="."]
texture = ExtResource( 2 )

[node name="Grid" type="Node" parent="."]

[node name="ShowAllDemos" parent="." instance=ExtResource( 1 )]
